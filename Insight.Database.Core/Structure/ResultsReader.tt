// <auto-generated/>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.cs" #>
<#@ include file="..\GenericTypes.tt" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Insight.Database.Structure
{
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, GenericTypeFormat);
	var previousTypeList = GetGenericList(typeCount - 1, GenericTypeFormat);
#>

	/// <summary>
	/// Reads a Results structure from a data reader stream.
	/// </summary>
	public class ResultsReader<<#= typeList #>> : IQueryReader<Results<<#= typeList #>>>
	{
		#region Fields
		/// <summary>
		/// The default reader for this type of result.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000:DoNotDeclareStaticMembersOnGenericTypes")]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
		public static readonly ResultsReader<<#= typeList #>> Default = new ResultsReader<<#= typeList #>>();

		/// <summary>
		/// The list reader used to read a set of records.
		/// </summary>
		private ListReader<T<#= typeCount #>> _listReader;
		#endregion

<# if (typeCount > 1) { #>
		/// <summary>
		/// Gets the previous reader for reading the results.
		/// </summary>
		/// <returns>The previous reader.</returns>
		private ResultsReader<<#= previousTypeList #>> _previous;
<# } #>

		#region Constructors
		/// <summary>
		/// Initializes a new instance of the ResultsReader class.
		/// </summary>
		public ResultsReader() : this(
<# if (typeCount > 1) { #>
			ResultsReader<<#= previousTypeList #>>.Default,
<# } #>
			OneToOne<T<#= typeCount #>>.Records)
		{
		}

		/// <summary>
		/// Initializes a new instance of the ResultsReader class.
		/// </summary>
<# if (typeCount > 1) { #>
		/// <param name="previous">The reader for the previous data set in the stream.</param>
<# } #>
		/// <param name="recordReader">The mapping that can read a single record from the stream.</param>
		public ResultsReader(
<# if (typeCount > 1) { #>
			IQueryReader<Results<<#= previousTypeList #>>> previous,
<# } #>
			IRecordReader<T<#= typeCount #>> recordReader)
		{
<# if (typeCount > 1) { #>
			_previous = (ResultsReader<<#= previousTypeList #>>)previous;
<# } #>
			_listReader = new ListReader<T<#= typeCount #>>(recordReader);
		}

<# if (typeCount == 1) { #>
		/// <summary>
		/// Initializes a new instance of the ResultsReader class from a ListReader.
		/// </summary>
		/// <param name="reader">The ListReader to convert to a ResultsReader.</param>
		public ResultsReader(ListReader<T1> reader)
		{
			_listReader = reader;
		}
<# } #>
		#endregion

		#region Methods
		/// <summary>
		/// Gets the type of objects returned by this reader.
		/// </summary>
		/// <returns>The type of objects returned by this reader.</returns>
		public Type ReturnType { get { return typeof(Results<<#= typeList #>>); } }

		/// <summary>
		/// Reads the results from the data stream.
		/// </summary>
		/// <param name="command">The command that was executed.</param>
		/// <param name="reader">The reader to read from.</param>
		/// <returns>The results.</returns>
		public Results<<#= typeList #>> Read(IDbCommand command, IDataReader reader)
		{
			var results = new Results<<#= typeList #>>();
			Read(command, results, reader);

			return results;
		}

		/// <summary>
		/// Reads the results from the data stream asynchronously.
		/// </summary>
		/// <param name="command">The command that was executed.</param>
		/// <param name="reader">The reader to read from.</param>
		/// <param name="cancellationToken">A token that can be used to cancel the operation.</param>
		/// <returns>The results.</returns>
		public async Task<Results<<#= typeList #>>> ReadAsync(IDbCommand command, IDataReader reader, CancellationToken cancellationToken)
		{
			var results = new Results<<#= typeList #>>();
			return (Results<<#= typeList #>>)await ReadAsync(command, results, reader, cancellationToken).ConfigureAwait(false);
		}

		/// <summary>
		/// Reads the results from the data stream into a specific object.
		/// </summary>
		/// <param name="command">The command that was executed.</param>
		/// <param name="results">The results to read into.</param>
		/// <param name="reader">The reader to read from.</param>
		/// <returns>The results.</returns>
		public void Read(IDbCommand command, Results<<#= typeList #>> results, IDataReader reader)
		{
			if (results == null) throw new ArgumentNullException("results");

<# if (typeCount > 1) { #>
			_previous.Read(command, results, reader);
<# } else { #>
			results.SaveCommandForOutputs(command);
<# } #>

			// read the objects from the reader
			results.Set<#= typeCount #> = _listReader.Read(command, reader);
		}

		/// <summary>
		/// Reads the results from the data stream asynchronously into a specific object.
		/// </summary>
		/// <param name="command">The command that was executed.</param>
		/// <param name="results">The results to read into.</param>
		/// <param name="reader">The reader to read from.</param>
		/// <param name="cancellationToken">A token that can be used to cancel the operation.</param>
		/// <returns>The results.</returns>
		public async Task<Results<<#= typeList #>>> ReadAsync(IDbCommand command, Results<<#= typeList #>> results, IDataReader reader, CancellationToken cancellationToken)
		{
			if (results == null) throw new ArgumentNullException("results");

<# if (typeCount > 1) { #>
			await _previous.ReadAsync(command, results, reader, cancellationToken).ConfigureAwait(false);
<# } else { #>
			results.SaveCommandForOutputs(command);
<# } #>
			// read the subobjects
			var subObjects = await _listReader.ReadAsync(command, reader, cancellationToken).ConfigureAwait(false);
			results.Set<#= typeCount #> = subObjects;

			return results;
		}

		/// <summary>
		/// Adds a child reader to this reader.
		/// </summary>
		/// <param name="child">The child reader to add.</param>
		internal ResultsReader<<#= typeList #>> AddChild(Children<T<#= typeCount #>> child)
		{
			var clone = (ResultsReader<<#= typeList #>>)MemberwiseClone();
			clone._listReader = _listReader.AddChild(child);
			return clone;
		}
		#endregion
	}

<# } #>
}
