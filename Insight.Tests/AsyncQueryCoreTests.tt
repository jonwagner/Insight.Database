<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="GenericTypes.tt" #>
using System;
using System.Linq;
using Insight.Database;
using Insight.Database.Structure;
using Insight.Tests.Cases;
using NUnit.Framework;

namespace Insight.Tests
{
	public partial class AsyncQueryCoreTests
    {
		///////////////////////////////////////////////////////
		// Read Results with Query Structure
		///////////////////////////////////////////////////////
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "Beer");
#>
		[Test]
		public void ReadResultsWithQueryStructure<#= typeCount#>()
		{
			var result = Connection().QuerySqlAsync(
				Beer.GetSelectAllProcMultipleTimes(<#= typeCount #>),
				null,
				Query.ReturnsResults(Some<Beer>.Records)
<# for (int i = 2; i <= typeCount; i++) { #>
					.Then(Some<Beer>.Records)
<# } #>
				).Result;

<# for (int i = 1; i <= typeCount; i++) { #>
			Beer.VerifyAll(result.Set<#= i #>);
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Read Results with Generic Arguments
		///////////////////////////////////////////////////////
<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "Beer");
#>
		[Test]
		public void ReadResultsWithGenerics<#= typeCount#>()
		{
			var result = Connection().QueryResultsSqlAsync<<#= typeList #>>(
				Beer.GetSelectAllProcMultipleTimes(<#= typeCount #>)).Result;

<# for (int i = 1; i <= typeCount; i++) { #>
			Beer.VerifyAll(result.Set<#= i #>);
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Read Nested With Query Structure
		///////////////////////////////////////////////////////
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "InfiniteBeer");
#>
		[Test]
		public void ReadNestedWithQueryStructure<#= typeCount #>()
		{
			var result = Connection().QuerySqlAsync(
				Beer.GetSelectNested(<#= typeCount #>),
				null,
				Query.ReturnsResults(OneToOne<<#= typeList #>>.Records)).Result;
			var beer = result.Set1.First();
			beer.Verify();

<# for (int i = 2; i <= typeCount; i++) { #>
			beer.<#= String.Join(".", Enumerable.Range(1, i - 1).Select(_ => "More").ToArray()) #>.Verify();
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Read Nested With Generics
		///////////////////////////////////////////////////////
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "InfiniteBeer");
#>
		[Test]
		public void ReadNestedWithGenerics<#= typeCount #>()
		{
			var result = Connection().QuerySqlAsync<<#= typeList #>>(Beer.GetSelectNested(<#= typeCount #>)).Result;
			var beer = result.First();
			beer.Verify();

<# for (int i = 2; i <= typeCount; i++) { #>
			beer.<#= String.Join(".", Enumerable.Range(1, i - 1).Select(_ => "More").ToArray()) #>.Verify();
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Single Nested With Query Structure
		///////////////////////////////////////////////////////
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "InfiniteBeer");
#>
		[Test]
		public void ReadSingleWithQueryStructure<#= typeCount #>()
		{
			var result = Connection().QuerySqlAsync(
				Beer.GetSelectNested(<#= typeCount #>),
				null,
				SingleReader<<#= typeList #>>.Default).Result;
			var beer = result;
			beer.Verify();

<# for (int i = 2; i <= typeCount; i++) { #>
			beer.<#= String.Join(".", Enumerable.Range(1, i - 1).Select(_ => "More").ToArray()) #>.Verify();
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Single Nested With Generics
		///////////////////////////////////////////////////////
<#
for (var typeCount = 1; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "InfiniteBeer");
#>
		[Test]
		public void ReadSingleWithGenerics<#= typeCount #>()
		{
			var result = Connection().SingleSqlAsync<<#= typeList #>>(Beer.GetSelectNested(<#= typeCount #>)).Result;
			var beer = result;
			beer.Verify();

<# for (int i = 2; i <= typeCount; i++) { #>
			beer.<#= String.Join(".", Enumerable.Range(1, i - 1).Select(_ => "More").ToArray()) #>.Verify();
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// MixedHierarchy with Query Structure
		///////////////////////////////////////////////////////
<#
for (var setCount = 1; setCount <= GenericTypeMax; setCount++)
for (var oneToOneCount = setCount; oneToOneCount <= setCount; oneToOneCount++)
{
	var typeList = GetGenericList(oneToOneCount, "InfiniteBeer");
#>
		[Test]
		public void TestMixedHierarchy_<#= setCount #>_<#= oneToOneCount #>()
		{
			var result = Connection().QuerySqlAsync(
				String.Join(";", Enumerable.Range(1, <#= setCount #>).Select(_ => Beer.GetSelectNested(<#= oneToOneCount #>)).ToArray()),
				null,
				Query.ReturnsResults(OneToOne<<#= typeList #>>.Records)
<# for (int i = 2; i <= setCount; i++) { #>
					.Then(OneToOne<<#= typeList #>>.Records)
<# } #>
					).Result;

<# for (int i = 1; i <= setCount; i++) { #>
			ClassicAssert.AreEqual(1, result.Set<#= i #>.Count());
			result.Set<#= i #>.First().Verify();
<# } #>
		}
<# } #>

		///////////////////////////////////////////////////////
		// Child Records
		///////////////////////////////////////////////////////
<#
for (var typeCount = 3; typeCount <= GenericTypeMax; typeCount++)
{
	var typeList = GetGenericList(typeCount, "InfiniteBeer");
#>
		[Test]
		public void TestHierarchy<#= typeCount #>()
		{
			var result = Connection().QuerySqlAsync(
				Beer.GetSelectAllChildren(<#= typeCount #>),
				null,
				Query.Returns(Some<InfiniteBeerList>.Records)
					.ThenChildren(Some<InfiniteBeerList>.Records)
					.ThenChildren(Some<InfiniteBeerList>.Records, parents: b => b.List)
<# for (int i = 4; i <= typeCount; i++) { #>
					.ThenChildren(Some<InfiniteBeerList>.Records, parents: b => b.List.<#= String.Join(".", Enumerable.Range(1, i-3).Select(x => "SelectMany(b2 => b2.List)").ToArray()) #>)
<# } #>
					).Result;
			InfiniteBeerList.VerifyAll(result);
		}
<# } #>

	}
}